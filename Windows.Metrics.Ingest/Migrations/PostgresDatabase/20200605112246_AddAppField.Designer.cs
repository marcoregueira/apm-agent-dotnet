// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Windows.Metrics.Ingest.Ef;

namespace Windows.Metrics.Ingest.Migrations.PostgresDatabase
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20200605112246_AddAppField")]
    partial class AddAppField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.EntityFrameworkHiLoSequence", "'EntityFrameworkHiLoSequence', '', '1', '10', '', '', 'Int64', 'False'");

            modelBuilder.Entity("Windows.Metrics.Ingest.Ef.ClientConfig", b =>
                {
                    b.Property<string>("App")
                        .HasColumnName("app")
                        .HasColumnType("text");

                    b.Property<string>("Client")
                        .HasColumnName("client")
                        .HasColumnType("text");

                    b.Property<string>("LogLevel")
                        .HasColumnName("loglevel")
                        .HasColumnType("text");

                    b.Property<bool>("LogSqlEnabled")
                        .HasColumnName("logsqlenabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("MetricsEnabled")
                        .HasColumnName("metricsenabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("TraceEnabled")
                        .HasColumnName("traceenabled")
                        .HasColumnType("boolean");

                    b.HasKey("App", "Client");

                    b.ToTable("client_config");
                });

            modelBuilder.Entity("Windows.Metrics.Ingest.Ef.ErrorEntity", b =>
                {
                    b.Property<long>("LineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("App")
                        .HasColumnName("app")
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .HasColumnName("data")
                        .HasColumnType("jsonb");

                    b.Property<string>("ErrorId")
                        .HasColumnName("errorid")
                        .HasColumnType("text");

                    b.Property<string>("Host")
                        .HasColumnName("host")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp");

                    b.Property<string>("TransactionId")
                        .HasColumnName("transactionid")
                        .HasColumnType("text");

                    b.HasKey("LineId");

                    b.HasIndex("Time");

                    b.ToTable("errors");
                });

            modelBuilder.Entity("Windows.Metrics.Ingest.Ef.LogEntity", b =>
                {
                    b.Property<long>("LineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("App")
                        .HasColumnName("app")
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .HasColumnName("data")
                        .HasColumnType("jsonb");

                    b.Property<string>("Database")
                        .HasColumnName("database")
                        .HasColumnType("text");

                    b.Property<decimal>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("numeric");

                    b.Property<string>("Host")
                        .HasColumnName("host")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .HasColumnName("level")
                        .HasColumnType("text");

                    b.Property<string>("LogId")
                        .HasColumnName("logId")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnName("message")
                        .HasColumnType("text");

                    b.Property<string>("RemoteHost")
                        .HasColumnName("remotehost")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp");

                    b.Property<string>("TransactionId")
                        .HasColumnName("transactionid")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnName("userid")
                        .HasColumnType("text");

                    b.HasKey("LineId");

                    b.HasIndex("Time");

                    b.ToTable("log");
                });

            modelBuilder.Entity("Windows.Metrics.Ingest.Ef.MetricEntity", b =>
                {
                    b.Property<long>("LineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Data")
                        .HasColumnName("data")
                        .HasColumnType("jsonb");

                    b.Property<string>("Host")
                        .HasColumnName("host")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp");

                    b.HasKey("LineId");

                    b.HasIndex("Time");

                    b.ToTable("metrics");
                });

            modelBuilder.Entity("Windows.Metrics.Ingest.Ef.TransactionEntity", b =>
                {
                    b.Property<long>("LineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Data")
                        .HasColumnName("data")
                        .HasColumnType("jsonb");

                    b.Property<string>("Database")
                        .HasColumnName("database")
                        .HasColumnType("text");

                    b.Property<decimal>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("numeric");

                    b.Property<string>("Host")
                        .HasColumnName("host")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnName("parentId")
                        .HasColumnType("text");

                    b.Property<string>("RemoteHost")
                        .HasColumnName("remotehost")
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .HasColumnName("result")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp");

                    b.Property<string>("TransactionId")
                        .HasColumnName("transactionId")
                        .HasColumnType("text");

                    b.Property<string>("TransactionType")
                        .HasColumnName("type")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnName("userid")
                        .HasColumnType("text");

                    b.HasKey("LineId");

                    b.HasIndex("Time");

                    b.ToTable("transaction");
                });
#pragma warning restore 612, 618
        }
    }
}
